package com.example.view;

import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;

public class MyFrameLayout extends ViewGroup {

	/**
	 * 行的总集合
	 */
	private List<Line> mList = new ArrayList<MyFrameLayout.Line>();
	/**
	 * 当前行
	 */
	private Line mCurrentLine = null;
	/**
	 * 行的高度
	 */
	private int lineHeight = 30;
	/**
	 * 俩个子控件之间的padding
	 */
	private int childSpace;
	/**
	 * 上下俩行之间的padding
	 */
	private int linePaddint;

	public MyFrameLayout(Context context) {
		this(context, null);
	}

	public MyFrameLayout(Context context, AttributeSet attrs) {
		super(context, attrs);
	}

	/**
	 * 设置间距
	 * 
	 * @param linePaddint
	 *            上下俩行之间的padding
	 * @param childPaddint
	 *            行中俩个子控件之间的padding
	 * 
	 */
	public void setSpace(int linePaddint, int childPaddint) {
		this.childSpace = childPaddint;
		this.linePaddint = linePaddint;
	}

	// 要控制内部尺寸大小,需重写onMeasure()
	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		// 每次调用前要情况
		mCurrentLine = null;
		mList.clear();

		// 一行的宽度
		int lineWidth = MeasureSpec.getSize(widthMeasureSpec)
				- getPaddingLeft() - getPaddingRight();
		// 获取父控件中,子控件数量
		int count = getChildCount();
		for (int i = 0; i < count; i++) {
			// 获得每一个子控件的size
			View childView = getChildAt(i);
			// 去测量每一个孩子的尺寸,我觉得后面这俩个尺寸没有实际意义,用0应该也没问题,只是提醒要去测量
			// childView.measure(widthMeasureSpec, heightMeasureSpec);和下面的意思一样的
			// mode三个模式:UNSPECIFIED/数字0表示:未申明的 EXACTLY:精确 AT_MOST:最大值为
			// measureChild(childView,MeasureSpec.makeMeasureSpec(200,
			// MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(35,
			// MeasureSpec.EXACTLY));

			// 这个无法理解,怎么一个子控件就能达到整个父控件的长宽呢
			measureChild(childView, widthMeasureSpec, heightMeasureSpec);

			// 如果当前行为空
			if (mCurrentLine == null) {
				mCurrentLine = new Line(lineWidth, lineHeight, childSpace);
				// 将新产生行加入集合中
				mList.add(mCurrentLine);
				// 当前的子孩子就可以添加到行里了
				mCurrentLine.addChildView(childView);
			} else if (mCurrentLine.canAddChildView(childView)) {
				// 再有子控件的话,做完约束条件的判断还可以添加,我们就让添加
				mCurrentLine.addChildView(childView);
			} else {
				// 说明下子控件已经不能添加进去了,我们就要另起一行,在开始添加
				mCurrentLine = new Line(lineWidth, lineHeight, childSpace);
				// 将新产生行加入集合中
				mList.add(mCurrentLine);
				// 当前的子孩子就可以添加到行里了
				mCurrentLine.addChildView(childView);
			}

		}

	
		// 父容器尺寸的确认
		// 父容器高度为,每行里最高的子控相加+行之间的padding+容器的paddingtop+容器的paddingbottom
		int height = 0;
		for (Line line : mList) {
			height += line.lineHeight;
		}
		int measuredHeight = height + (mList.size() - 1) * linePaddint
				+ getPaddingTop() + getPaddingBottom();
		// This method must be called by {@link #onMeasure(int, int)} to store
		// the measured width and measured height.
		// Failing to do so will trigger an exception at measurement time.
		// measuredWidth The measured width of this view ...measuredHeight The
		// measured height of this view
		setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec),
				measuredHeight);
		
		
	}

	// 测量完一定要布局
	@Override
	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		// // 给每一个子控件布局
		// int count = getChildCount();
		// for (int i = 0; i < count; i++) {
		// View childView = getChildAt(i);
		// }
		// 按行来给控件布局
		int top = getPaddingTop();
		int left = getPaddingLeft();
		for (int i = 0; i < mList.size(); i++) {
			Line line = mList.get(i);
			// 设置一行的布局
			line.layout(left, top);
			// 因为行里面的子控件,我们只能控制到左右距离,所以下一行的高度变化在这里控制
			top += (i == mList.size() - 1) ? getPaddingBottom()
					: (linePaddint + line.lineHeight);
		}

	}

	// 从布局来看剩余显示的View可以看成是一行,一行的往ViewGroup里面加
	private class Line {

		// 属性
		/**
		 * 行的宽度
		 */
		private int lineWidth;
		/**
		 * 行中已经使用的宽度
		 */
		private int useWidth;
		/**
		 * 行的高度
		 */
		private int lineHeight;
		/**
		 * 子控件之间的padding
		 */
		private int childSpace;

		/**
		 * 
		 * @param lineWidth
		 *            行的宽度
		 * @param lineHeight
		 *            行的高度
		 * @param childSpace
		 *            子控件之间的padding
		 */
		public Line(int lineWidth, int lineHeight, int childSpace) {
			this.lineHeight = lineHeight;
			this.lineWidth = lineWidth;
			this.childSpace = childSpace;
		}

		/**
		 * 行中包含多个子控件,装入集合
		 */
		private List<View> list = new ArrayList<View>();

		/**
		 * 是否如可以往行控件中添加子控件
		 * 
		 * @param view
		 * @return
		 */
		private boolean canAddChildView(View view) {
			// 如果LIST<Line>没有,那肯定可以添加
			if (list.size() == 0) {
				return true;
			} else if (useWidth + childSpace + view.getMeasuredWidth() <= lineWidth) {
				// 控件加入再加上各种约束条件还小于行宽度现限制,那肯定可以添加
				return true;
			}
			return false;
		}

		/**
		 * 往行里添加子控件,添加前.必需先做canAddChildView()的判断
		 * 
		 * @param view
		 */
		private void addChildView(View view) {
			// 这里有个极限条件,我们要调整一下,当行里面的控件为0的时候肯定可以添加,但是我们子控件的最大宽度不能大于父控件的,要是超过我们可以让子控件等于父控件的
			int height = view.getMeasuredHeight();
			int width = view.getMeasuredWidth();

			// 第一次添加时,有极限条件要额外考虑下,来到这,说明这个view可以加入行,对应的更改成员属性的值,作为下一个控件能否加入的约束条
			if (list.size() == 0) {
				if (width > lineWidth) {
					width = lineWidth;
					useWidth = lineWidth;
				} else {
					useWidth = width;
				}
			} else {
				// 不是第一次加入
				useWidth += childSpace + width;
			}
			// 行的高度,谁大取谁的
			lineHeight = (lineHeight > height ? lineHeight : view
					.getMeasuredHeight());
			list.add(view);
		}

		/**
		 * 对一行的子控件进行布局,一定要在添加完后,才能布局
		 * 
		 * @param left
		 *            第一个子控件据左上角距父控件的左距离
		 * @param top
		 *            第一个子控件据左上角距父控件的上距离
		 */
		private void layout(int left, int top) {
			// 每行看看是不是有多月空下来,有的话把他平均分配到每个子控件宽度中区
			int avgWidth = (int) (((lineWidth - useWidth) * 1f) / list.size() + 0.5f);
			for (int i = 0; i < list.size(); i++) {
				View childView = list.get(i);
				int width = childView.getMeasuredWidth();
				int height = childView.getMeasuredHeight();

				if (avgWidth > 0) {
					//这里用measureChild()的效果不等于childView.measure???
//					measureChild(childView, MeasureSpec.makeMeasureSpec(width
//							+ avgWidth, MeasureSpec.EXACTLY),
//							MeasureSpec.makeMeasureSpec(height,
//									MeasureSpec.EXACTLY));
					childView.measure( MeasureSpec.makeMeasureSpec(width
							+ avgWidth, MeasureSpec.EXACTLY),
							MeasureSpec.makeMeasureSpec(height,
									MeasureSpec.EXACTLY));
				 width = childView.getMeasuredWidth();
				 height = childView.getMeasuredHeight();
				}
				//因为tv中setTextSize()里面随机了.导致我们的每个控件的高度参差不齐,所以要要做调整
				int avgHeight=(lineHeight-height)/2;//矮的那种就要下移动1/2
                
				// 因为子控件距离父控件的左上角我们无法确定,就让外界给我们
				int vleft = left;
				int vtop = top+avgHeight;
				int vright = vleft + width;
				int vbottom = vtop + height;
				childView.layout(vleft, vtop, vright, vbottom);
				// 下一个子控件,相对于父控件,除了高度位置上没变,宽度位置上都变了
				left = vright + childSpace;//left+=width+childSpace
				// r=left+width;右边的宽度位置相对与上个左上角公式还是没变

			}

		}

	}

}
